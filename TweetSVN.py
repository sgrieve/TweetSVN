# -*- coding: utf-8 -*-
"""
Script that scrapes commit info from svn logs, formats the info into a tweet
and then tweets it.

New version uses the tweepy python library to handle all of the tweeting
rather than the external perl script I used to use.

Requres python 3, tweepy, a file secrets.py which holds the twitter
authentication information and a twitter accout with the OAUTH set up to allow
tweepy to tweet on an account.

Created on Fri Jul 03 16:59:37 2015
Updated 12/1/17

@author: Stuart Grieve
"""
import sys
import tweepy
from secrets import *


def ScrapeSVN(repoURL):
    """
    Given a url to an svn repo, return a file object that contains the last
    commit message from svn log.
    """
    import subprocess

    command = ('svn --non-interactive --no-auth-cache --username {0} '
               '--password {1} log -l 1 {2}'.format(SVN_USR, SVN_PASS, repoURL))

    process = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
    return process.stdout


def ByteString2String(Bstring):
    """
    Convenience function to convert a byte string to string.
    """
    return str(Bstring, 'utf-8')


def get_commit_info(FileObject):
    """
    Given a file object generated by ScrapeSVN use regex to pull out the
    revision number and the commit message. check_length_for_tweet
    is then called to trim the commit to the length of a tweet.
    Returns the trimmed message and the revision number as strings.
    """
    import re

    data = FileObject.read()
    FileObject.close()
    revision = re.search(b'r(\d+)\s\|', data).group()[1:-2]
    message = re.search(b'(\s\s)(.+?)(?=---)', data, re.DOTALL).group().strip()

    return check_length_for_tweet(ByteString2String(revision),
                                  ByteString2String(message))


def check_length_for_tweet(revision, message):
    """
    Recursively remove a word from the message until it is small enough to tweet
    """
    # I think 115 is the hard limit once the url is shortened
    if len(revision) + len(message) > 110:
        # get rid of a word
        message = ' '.join(message.split(' ')[:-1])
        return check_length_for_tweet(revision, message)

    return revision, message


def make_a_tweet(revision, message, url):
    """
    Generate a valid tweet using the info passed in.
    """
    return revision + ': ' + message + ' | ' + url


def Tweet(Tweet, revision):
    """
    Tweet the commit message and wrie the revision number to a file.
    """
    # Twitter authentication
    auth = tweepy.OAuthHandler(C_KEY, C_SECRET)
    auth.set_access_token(A_TOKEN, A_TOKEN_SECRET)
    api = tweepy.API(auth)

    api.update_status(Tweet)

    # store the revision number in a file
    with open('.rev', 'w') as f:
        f.write(revision)


def CheckForNewCommit(Revision):
    """
    Avoid repeating the same tweet by comparing revision numbers.
    Returns True if values are different.
    """
    import os.path as op
    if op.isfile('.rev'):
        with open('.rev', 'r') as f:
            CurrentRev = int(f.readline())
    else:
        # if the file is not present assume commit is new,
        # set value to zero so function returns True
        CurrentRev = 0
    return CurrentRev != int(Revision)


def Run(repoURL, url):
    """
    Wrapper to run all of the steps to send out a tweet.
    """
    CommitObject = ScrapeSVN(repoURL)
    a, b = get_commit_info(CommitObject)
    FinalTweet = make_a_tweet(a, b, url)

    if CheckForNewCommit(a):
        Tweet(FinalTweet, a)

if __name__ == "__main__":
    if len(sys.argv) == 3:
        Run(sys.argv[1], sys.argv[2])
    else:
        sys.exit('%s needs 2 arguments:\n\n[1] The url of the svn repository'
                 '\n[2] The url to attach to each tweet\n' % sys.argv[0])
