# -*- coding: utf-8 -*-
"""
Created on Fri Jul 03 16:59:37 2015

@author: s0675405
"""

def ScrapeSVN(repoURL):
    """
    Given a url to an svn repo, return a file object that contains the last 
    commit message from svn log.
    """
    import subprocess
    command = 'svn log -l 1 ' + repoURL 
    process = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)
    return process.stdout

def get_commit_info(FileObject):
    """
    Given a file object generated by ScrapeSVN use regex to pull out the
    revision number and the commit message. check_length_for_tweet
    is then called to trim the commit to the length of a tweet. 
    Returns the trimmed message and the revision number as strings.
    """    
    import re
    
    data = FileObject.read()
    FileObject.close()
            
    revision = re.search('r(\d+)\s\|',data).group()[1:-2]
    message = re.search('(\s\s)(.+?)(?=---)',data, re.DOTALL).group().strip()
    
    return check_length_for_tweet(revision,message)

def check_length_for_tweet(revision,message):
    """
    Recursively remove a word from the message until it is small enough for a tweet
    """
    if len(revision)+len(message) > 110: #I think 115 is the hard limit once the url is shortened 
        #get rid of a word
        message = ' '.join(message.split(' ')[:-1])
        return check_length_for_tweet(revision,message)
     
    return revision,message
    
def make_a_tweet(revision,message,url):
    """
    Generate a valid tweet using the info passed in.
    """
    return revision + ': ' + message + ' | '+ url

def Tweet(Tweet, revision):
    """
    Send the tweet using ttytter and write the revision number into
    .rev
    """
    import subprocess
    command = 'perl ttytter.pl -status=\"'+Tweet+'\" /short'
    subprocess.Popen(command, stdout=subprocess.PIPE, shell=True) 
    with open('.rev','w') as f:
        f.write(revision)
    
    
def CheckForNewCommit(Revision):
    """
    Avoid repeating the same tweet by comparing revision numbers.
    Returns True if values are different.
    
    Need to test for .rev existing and create it if not.
    """
    with open('.rev','r') as f:
        CurrentRev = int(f.readline())
    
    return CurrentRev != int(Revision)

def Run():
    repoURL = 'https://svn.ecdf.ed.ac.uk/repo/geos/LSD_devel/LSDTopoTools/trunk'
    
    CommitObject = ScrapeSVN(repoURL)
    
    
    a,b = get_commit_info(CommitObject)
    
    url = 'https://sourced.ecdf.ed.ac.uk/projects/geos/LSD_devel/timeline'
    
    FinalTweet = make_a_tweet(a,b,url)

    print 'I would tweet now'
    if CheckForNewCommit(a):          
        Tweet(FinalTweet,a)

if __name__ == "__main__":
    Run()
